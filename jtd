#!/usr/bin/env variant

parameters:
  - name: project
    type: string
    description: project name
  - name: assignee
    type: string
    description: assignee name
  - name: no_cache
    type: boolean
    default: false

mixins:
  parse_parameters: &parse_parameters |
    project={{ get "project" }}
    assignee={{ get "assignee" }}
    no_cache={{ get "no_cache" }}
    cache_dir=.jtd/cache
    cache_file_path="${cache_dir}/list-${project}-${assignee}"

  fetch_issues: &fetch_issues |
    mkdir -p $cache_dir
    ls $cache_file_path > /dev/null 2>&1
    if [ $? -ne 0 ] || [ $no_cache = "true" ]; then
      jira list -p $project -a $assignee -t json > $cache_file_path
    fi

  force_fetch_issues: &force_fetch_issues |
    mkdir -p $cache_dir
    jira list -p $project -a $assignee -t json > $cache_file_path

  select_issue_id: &select_issue_id |
    issue_id=`cat ${cache_file_path} \
      | jq -r '.issues[] | [.id, .fields.status.name, .fields.summary] | join(" | ")' | peco | awk -F '|' '{print $1}'`
    if [ "$issue_id" = "" ]; then
      exit 0
    fi

tasks:
  create:
    parameters:
      - name: summary
        type: string
        description: Summary of task
      - name: description
        type: string
        description: Description of task
        default: ""
      - name: priority
        type: string
        description: Priority of task
        default: "None"
      - name: board-id
        type: integer
        description: Board ID for task
    script:
      - *parse_parameters
      - |
        summary={{ get "summary" }}
        description={{ get "description" }}
        priority={{ get "priority" }}
        board_id={{ get "board-id" }}

        sprint_id=`jira request -M GET "/rest/agile/1.0/board/$board_id/sprint?state=active" | jq '.values[].id'`
        epic_id=`jira request -M GET "/rest/agile/1.0/board/$board_id/epic?done=false" | jq -r '.values[] | [.id, .name] | join(" | ")' | peco | awk -F ' | ' '{print $1}'`

        result=`jira create \
          -p $project \
          -i Ask \
          -o summary="$summary" \
          -o description="$description" \
          -o priority="$priority" \
          -o assignee="$assignee" \
          --noedit`
        echo "$result"

        issue_name=`echo "$result" | awk '{print $2}'`
        jira request -M POST '/rest/agile/1.0/sprint/'$sprint_id'/issue' '{"issues": ["'$issue_name'"]}' > /dev/null 2>&1
        jira request -M POST '/rest/agile/1.0/epic/'$epic_id'/issue' '{"issues": ["'$issue_name'"]}' > /dev/null 2>&1
      - *force_fetch_issues

  list:
    description: List tasks
    script:
      - *parse_parameters
      - *fetch_issues
      - |
        cat ${cache_file_path} | jq -r '.issues[] | [.id, .fields.status.name, .fields.summary] | join(" | ")'
  todo:
    script:
      - *parse_parameters
      - *fetch_issues
      - *select_issue_id
      - |
        jira transition "To Do" $issue_id --noedit
      - *force_fetch_issues
  start:
    script:
      - *parse_parameters
      - *fetch_issues
      - *select_issue_id
      - |
        jira transition "進行中" $issue_id --noedit
      - *force_fetch_issues
  done:
    parameters:
      - name: time
        type: integer
        default: 0
    script:
      - *parse_parameters
      - *fetch_issues
      - *select_issue_id
      - |
        time={{ get "time" }}
        if [ $time -ne 0 ]; then
          jira worklog add $issue_id -T $time --noedit
        fi
        jira transition "完了" $issue_id --noedit
      - *force_fetch_issues
